---
import DefaultLayout from '@layouts/DefaultLayout.astro'
import PageHeader from '@components/PageHeader.astro'
import { Card, Pagination } from 'accessible-astro-components'
import { getCollection } from 'astro:content'
import type { GetStaticPaths, Page } from 'astro'
import type { CollectionEntry } from 'astro:content'

export const getStaticPaths = (async ({ paginate }) => {
  let posts = await getCollection('blog')

  // Only show posts that are not hidden
  posts = posts.filter((p) => !p.data.hidden)

  // Filter out items with missing or invalid pubDate
  posts = posts.filter((p) => {
    const date = new Date(p.data.pubDate)
    return !isNaN(date.getTime())
  })

  // Sort by pubDate descending (newest first)
  posts.sort((a, b) => {
    const dateA = new Date(a.data.pubDate)
    const dateB = new Date(b.data.pubDate)
    return dateB.getTime() - dateA.getTime()
  })

  // Attach heroImage from frontmatter
  const postsWithImages = posts.map((post) => ({
    ...post,
    heroImage: post.data.heroImage || undefined,
    shortUrl: post.slug,
    title: post.data.title,
    description: post.data.description || '',
    author: post.data.author || '',
  }))

  // Paginate sorted posts (6 per page)
  return paginate(postsWithImages, { pageSize: 6 })
}) satisfies GetStaticPaths

interface Props {
  page: Page<CollectionEntry<'blog'> & { heroImage?: string; shortUrl: string; title: string; description: string; author: string }>
}

const { page } = Astro.props
---

<DefaultLayout
  title="Blog"
  description="A blog with dynamic content from MDX files in the content collection."
>
  <PageHeader
    title="Blog"
    subtitle="Posts are loaded from the content collection and sorted by date."
    bgType="bordered"
  />

  <section class="my-12">
    <div class="container">
      {page.total === 0 ? (
        <p class="text-center text-lg">No blog posts available.</p>
      ) : (
        <>
          <p class="text-sm"><em>Post {page.start + 1} through {page.end + 1} of {page.total} total posts</em></p>
          <ul class="my-3 grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
            {
              page.data.map((post) => (
                <li>
                  <Card
                    imageComponent={post.heroImage}
                    url={'/blog/' + post.shortUrl}
                    title={post.title}
                    footer={post.author ? `Author: ${post.author}` : ''}
                  >
                    {post.description}
                  </Card>
                </li>
              ))
            }
          </ul>
          <div class="mt-12 grid place-content-center">
            <Pagination
              firstPage={page.url.prev ? '/blog' : null}
              previousPage={page.url.prev || null}
              nextPage={page.url.next || null}
              lastPage={page.url.next ? `/blog/${Math.ceil(page.total / page.size)}` : null}
              currentPage={`${page.currentPage}`}
              totalPages={`${Math.ceil(page.total / page.size)}`}
              ariaLabel="Blog pagination"
            />
          </div>
        </>
      )}
    </div>
  </section>
</DefaultLayout>

<style lang="scss" is:global>
  @use '../../assets/scss/base/mixins' as *;

  .card {
    h3 {
      margin-block-end: var(--space-xs);
      line-height: 0.75;
    }

    a {
      @include text-decoration(transparent, var(--foreground-color), 4px, 2px);
    }
  }
</style>
